--QUESTION ONE
--This questions requires the number of indiviual users registered on Wave.
SELECT COUNT(u_id) AS wave_users FROM users; 

 

--QUESTION TWO
-- This questions seeks to find a specific value, in CFA, in the field, send_amount_currency.
SELECT COUNT(transfers_id) AS cfa_transfers FROM transfers
WHERE send_amount_currency='CFA';

 

--QUESTION THREE
--Every individual user who has made a transfer in CFA should have a primary key, their distinct identity which is in the 'u_id' field.
SELECT DISTINCT COUNT(u_id) AS cfa_user_transfers FROM transfers
WHERE send_amount_currency = 'CFA';

 

--QUESTION FOUR
--Transactions made by each agent across all months is determined and counted. This is extracted from the agent transaction ID, atx_id from the agent transactions table and the respective timeframe, from the 'when_created' column, within which the transactions took place.
SELECT TO_CHAR(TO_DATE (EXTRACT(MONTH FROM when_created)::text, 'MM'), 'Month') AS transaction_month,
COUNT(atx_id) AS num_of_agents FROM agent_transactions
WHERE EXTRACT(YEAR FROM when_created)=2018
GROUP BY EXTRACT(MONTH FROM when_created);



--QUESTION FIVE
--A condition is set to take out zero amount values by giveing reference to transactions within the past week. We determine the sum of transaction amounts to determine the net withdrawers and depositors and 
--We group them by positive and negative values.
SELECT 
CASE WHEN net_value > 0 THEN 'NET WITHDRAWERS'
ELSE 'NET DEPOSITORS'
END, 
COUNT(agent_id) AS net_count FROM (SELECT agent_id, sum(amount) AS net_value FROM agent_transactions
WHERE ((amount < 0) OR (amount > 0)) AND (agent_transactions.when_created BETWEEN 
NOW()::DATE-EXTRACT(DOW FROM NOW())::INTEGER-7 
AND NOW()::DATE-EXTRACT(DOW from NOW())::INTEGER)                                 
GROUP BY agent_id 
ORDER BY agent_id ASC) AS abc
GROUP BY (net_value > 0);
   
   
   
--QUESTION SIX
CREATE VIEW atx_volume_city_summary AS
SELECT agents.city AS city, COUNT(agent_transactions.atx_id) AS trans_volume FROM agents 
INNER JOIN agent_transactions 
ON agents.agent_id = agent_transactions.agent_id
WHERE (agent_transactions.when_created BETWEEN 
NOW()::DATE-EXTRACT(DOW FROM NOW())::INTEGER-7 
AND NOW()::DATE-EXTRACT(DOW from NOW())::INTEGER) 
GROUP BY agents.city

 

--QUESTION SEVEN
CREATE VIEW atx_volume_city_summary_by_country AS
SELECT agents.country AS country, agents.city AS city, COUNT(agent_transactions.atx_id) AS Volume FROM agents 
INNER JOIN agent_transactions 
ON agents.agent_id = agent_transactions.agent_id
WHERE (agent_transactions.when_created BETWEEN 
NOW()::DATE-EXTRACT(DOW FROM NOW())::INTEGER-7 
AND NOW()::DATE-EXTRACT(DOW from NOW())::INTEGER) 
GROUP BY agents.country, agents.city

 

--QUESTION EIGHT
--We display rows that have data from the previous week. We then join the transfers and wallets tables based on the same wallet id (wallet_id). A table is created to show the country, transfer kind and the volume of transfers grouped by the country and kind of transaction.
CREATE VIEW send_volume_by_country_and_kind AS
SELECT wallets.ledger_location AS country, transfers.kind AS transfer_kind, 
SUM(transfers.send_amount_scalar) AS volume 
FROM transfers 
INNER JOIN wallets 
ON transfers.source_wallet_id = wallets.wallet_id
WHERE (transfers.when_created BETWEEN 
NOW()::DATE-EXTRACT(DOW FROM NOW())::INTEGER-7 
AND NOW()::DATE-EXTRACT(DOW from NOW())::INTEGER)                                       
GROUP BY wallets.ledger_location, transfers.kind;

 

--QUESTION NINE
--Just like QYESTION 8, we display rows that have data from the previous week. This can be achieved by joining the transfers and wallets tables based on the same wallet id (wallet_id)
--A table is then created to show the country, transfer kind, the volume of transfers, number of transactions, and the unique number of senders grouped by country and kind of transaction.
CREATE OR REPLACE VIEW send_volume_by_country_and_kind AS
SELECT transfers.kind AS transfer_kind, wallets.ledger_location AS country, 
SUM(transfers.send_amount_scalar) AS volume, COUNT(transfers.send_amount_scalar) AS trans_count,
COUNT(DISTINCT transfers.source_wallet_id) AS unique_senders
FROM transfers 
INNER JOIN wallets 
ON transfers.source_wallet_id = wallets.wallet_id
WHERE transfers.when_created BETWEEN 
NOW()::DATE-EXTRACT(DOW FROM NOW())::INTEGER-7 
    AND NOW()::DATE-EXTRACT(DOW from NOW())::INTEGER                                   
GROUP BY wallets.ledger_location, transfers.kind;
    
    
    
--QUESTION TEN
--Transactions done in CFA that were above 10,000,000 in the last month are shown. The wallet id (source_wallet_id) and amount sent, (send_amount_scalar) is also shown.
SELECT source_wallet_id, send_amount_scalar
FROM transfers
WHERE (send_amount_currency ='CFA')
AND (send_amount_scalar > 10000000)
AND (EXTRACT(MONTH FROM when_created) = EXTRACT(MONTH FROM NOW()) - 1)
    
    
    
